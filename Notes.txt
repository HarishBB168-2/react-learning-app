Section : Test driven development

- Reference
* https://www.freecodecamp.org/news/how-to-write-unit-tests-in-react/

- Structure
* What to test
If a component renders with or without props
How a component renders with state changes
How a componnet reacts to user interactions
* What not to test
Actual implementation : not testing actual sorting logic.
Third part libraries : they are already tested.
* Testing steps
> Render the component
> Get an element from the component and simulate any user interaction
> Write an assertion

- Setup
* Using create-react-app
* Libraries - jest and react-testing-library
* Ensure setupTests.js has
import '@testing-library/jest-dom';
import '@testing-library/jest-dom/extend-expect';
* In package.json
> change scripts.test : "react-scripts test --watchAll --coverage"
> For coverage threshold, add : 
    jest.coverageThreshold.global.lines : 80

- Writing test
* Folder containing component, create "__tests__" folder
* Create test element.test.jsx as :
import { render, screen } from '@testing-library/react'
import Element from '../components/Element';

test("Example 1 renders successfully", () => {
    render(<Element/>);

    const element = screen.getByText(/first test/i);

    expect(element).toBeInTheDocument();
})

- Using Mock data
* In test file declare test data
mockData = [...]
* Use in render as
render(<Element data={mockData}/>);

- Covering all branches
* Use different set of mock data to get different branches
* Write different test functions for that

- Test user interactions
* Install user-event library
npm i --save-dev @testing-library/user-event
* Test onClick of element
Checking onClick to be called

test("Email link click handler called", async () => {
    const mockHandleClick = jest.fn();
    render(<TestWithMockData 
                data={mockData} 
                displayUnorderedList={true}
                handleClick = {mockHandleClick}
          />)
    await userEvent.click(screen.getByText(/user@mail.com/i));
    expect(mockHandleClick).toHaveBeenCalled();
})

- Query input fields and buttons
* input type text : screen.getByRole('textbox')
* button : screen.getByRole('button')
* input by placeholder : screen.getByPlaceholderText(/enter name/i);
* input by label : screen.getByLabelText(/enter password/i);
* button by name : screen.getByRole('button', { name: /submit/i });
* input by label : screen.getByRole('textbox', { name: /enter password/i });

- Test state updates
* Calling action as :
await act(async () => {
    await userEvent.click(screen.getByText(/toggle text/i));
});
* State change on button click
test("Toggle text visible", async () => {
    render(<TestingStateChange/>);
    await act(async () => {
        await userEvent.click(screen.getByText(/toggle text/i));
    });
    expect(screen.getByText(/text visible/i)).toBeInTheDocument();
})
* Test if element was added to list
> Use data-testid='record' for all records of list
test("Element added to the list", async () => {
    render(<TestingStateChange/>)
    expect(screen.getAllByTestId('record').length).toBe(3);

    await act(async () => {
        await userEvent.click(screen.getByText(/add to list/i));
    });
    expect(screen.getAllByTestId('record').length).toBe(4);
})
* Test if element was removed from list
test("Element removed from list", async () => {
    render(<TestingStateChange/>)

    await act(async () => {
        await userEvent.click(screen.getByText(/remove from list/i));
    });
    expect(screen.getAllByTestId('record').length).toBe(2);
})


- Test API Calls
* Mocking api calling function as 
const mockFetchData = jest.spyOn(services, 'FetchData')
    .mockImplementation(async () => {
        return [{
            name: 'kunal'
        }];
    })
* Waiting asynchronouse behaviour to finish before Checking
await waitFor(() => {...})
* Using as :
test("Fetch Data API called", async () => {
  const mockFetchData = ...

  render(<TestingAPICalls />);
  expect(mockFetchData).toHaveBeenCalled();
  await waitFor(() => {
    expect(screen.getByText(/kunal/i)).toBeInTheDocument();
  });
});


------------------------------------------------------

Section 2 - Hooks

- useContext Basics
* In App.js
* Create context : 
const ThemeContext = React.createContext()
* Providing
<ThemeContext.Provider value={data}>
    {...children...}
</ThemeContext.Provider>
* In Class child
import ThemeContext
<ThemeContext.Consumer>
{data => <div>{use data...}</div>}
</ThemeContext.Consumer>
* In function child
import useContext and ThemeContext
const data = useContext(ThemeContext)
> Use it as normal data.

- useContext Advanced
* Create ThemeContext.js
> Extract all logic of theme information.
> Providers will be here
> Ability to update theme will be here
> Handling and updating state
> Giving values to children
* Extract as :
> Import : React, useContext, useState
> Also create hook for providing context also :
useTheme, useThemeUpdate
> Write function as

const ThemeContext = React.createContext()
const ThemeUpdateContext = React.createContext()

export function useTheme() {
    return useContext(ThemeContext)
}
export function useThemeUpdate() {
    return useContext(ThemeContextUpdate)
}

export function ThemeProvider({children}) {
    const [darkTheme, setDarkTheme] = useState(true)

    function toggleTheme() {
        setDarkTheme(prevDarkTheme => !prevDarkTheme)
    }

    return <ThemeContext.Provider value={darkTheme}>
        <ThemeUpdateContext.Provider value={toggleTheme}>
            {children}
        </ThemeUpdateContext.Provider>
    </ThemeContext.Provider>
}
* App.js will become as
> Import ThemeProvider
> Providing as
<ThemeProvider>
    {...children...}
</ThemeProvider>
* In Child function component
> Import : useTheme, useThemeUpdate
> Use as
const darkTheme = useTheme()
const toggleTheme = useThemeUpdate()


